[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Compare time-course gene expression across species",
    "section": "",
    "text": "This website contain analyses by Aman and Billu for an on-going project that compares time-series gene expression data across species.\nMajority of the data sets used are from the paper by Laloum and Robinson-Rechavi (add reference here)."
  },
  {
    "objectID": "index.html#some-issues",
    "href": "index.html#some-issues",
    "title": "Compare time-course gene expression across species",
    "section": "Some issues:",
    "text": "Some issues:\nNot all of the above Cflo genes are 1:1 orthologs, some likely have paralogs in other species.\n\n\nFor how many ant genes, there are ≥ 2 genes in at least one more species?\n\n\n\nNumber of 1:1 orthlogs between Cflo and other species\n\n\nCflo:other species (orthology)\nNumber of genes\n\n\n\n\n1:1\n2257\n\n\n1:n possible\n368"
  },
  {
    "objectID": "build_plot_gcn.html",
    "href": "build_plot_gcn.html",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "",
    "text": "Show code\nlibrary(dplyr)\nlibrary(dbplyr)\nlibrary(ggplot2)\nfor (i in list.files(here::here(\"R\"), full.names = TRUE)) {\n  source(i)\n}\n\n# SAMPLE NAME\n## specify sample name\nsample.names &lt;- c(\n  # dmel\n  \"dmel-head\",\n  # mmus\n  \"mmus-brain_stem\", \n  # panu\n  \"panu-hypothalamus\"\n)\n# sample.cycles &lt;- c(\"LD\", \"DD\")\n\n## SPECIFY THE DATASET TO BUILD GCN WITH\nwhich.sample &lt;- sample.names[2]"
  },
  {
    "objectID": "build_plot_gcn.html#convert-to-function",
    "href": "build_plot_gcn.html#convert-to-function",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "CONVERT TO FUNCTION",
    "text": "CONVERT TO FUNCTION\n\n\nShow code\nwriteLines(paste0(\"Selected Dataset: \", which.sample))\n\n\nSelected Dataset: mmus-brain_stem\n\n\nShow code\n# extract the (gene-expr X time-point-of-sampling) data\ndat &lt;-\n  data.db %&gt;%\n  purrr::pluck(which.sample) |&gt; \n  # tbl(paste0(which.sample ,\"_log2expression\")) %&gt;%\n  mutate(\n    across(\n      !gene_name,\n      ~ log2(.x + 1)\n    )\n  ) |&gt; \n  select(gene_name, everything()) %&gt;%\n  collect()\n\nwriteLines(\n\"What is the dimensions of the original dataset? \n[Rows = #genes, Cols = #samples]\"\n)\n\n\nWhat is the dimensions of the original dataset? \n[Rows = #genes, Cols = #samples]\n\n\nShow code\ndim(dat[-1])\n\n\n[1] 17406     8"
  },
  {
    "objectID": "build_plot_gcn.html#convert-to-function-1",
    "href": "build_plot_gcn.html#convert-to-function-1",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "CONVERT TO FUNCTION",
    "text": "CONVERT TO FUNCTION\n\n\nShow code\ndatExpr = as.data.frame(t(dat[-c(1)]))\nnames(datExpr) = dat$gene_name\nrownames(datExpr) = names(dat)[-c(1)]\n\n# USE THE FOLLOWING CODE TO CHECK IF YOU HAVE ANY BAD SAMPLES #\n  # gsg = goodSamplesGenes(datExpr, verbose = 3);\n  # gsg$allOK\n\n  # sampleTree = hclust(dist(datExpr0), method = \"average\");\n  # # Plot the sample tree: Open a graphic output window of size 12 by 9 inches\n  # # The user should change the dimensions if the window is too large or too small.\n  # sizeGrWindow(12,9)\n  # #pdf(file = \"Plots/sampleClustering.pdf\", width = 12, height = 9);\n  # par(cex = 1);\n  # par(mar = c(0,4,2,0))\n  # plot(sampleTree, main = \"Sample clustering to detect outliers\", sub=\"\", xlab=\"\", cex.lab = 1.5,\n  #      cex.axis = 1.5, cex.main = 2)\n\n# save the number of genes and samples\n# that will be used to create the circadian GCN\nnGenes = ncol(datExpr)\nnSamples = nrow(datExpr)\n\nwriteLines(\"Visualizing the log-transformed data\")\n\n\nVisualizing the log-transformed data\n\n\nShow code\ndatExpr |&gt; \n  tibble::rownames_to_column(\n    \"sample\"\n  ) |&gt; \n  as_tibble() |&gt; \n  tidyr::pivot_longer(\n    cols = !sample,\n    names_to = \"gene_id\",\n    values_to = \"log2_fpkm\"\n  ) |&gt; \n  mutate(\n    sample = stringr::str_remove(sample, \"ZT\")\n  ) |&gt; \n  ggplot(\n    aes(\n      x = log2_fpkm, \n      # color = sample,\n      fill = sample\n    )\n  ) + \n  geom_density(\n    position = \"stack\"\n  ) + \n  theme_bw(25) +\n  scale_fill_manual(\n    values = viridis::viridis(nSamples)\n  ) +\n  theme(\n    legend.position = \"bottom\",\n    legend.justification = \"right\"\n  ) +\n  guides(\n    fill = guide_legend(\n      nrow = 3,\n      byrow=TRUE\n    )\n  )"
  },
  {
    "objectID": "build_plot_gcn.html#user-input-required--",
    "href": "build_plot_gcn.html#user-input-required--",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "USER INPUT REQUIRED —-",
    "text": "USER INPUT REQUIRED —-\nTo create the adjacency matrix, we need to first identify the soft-thresholding power (see WGCNA for more info).\n\n\nShow code\nsft &lt;- analyze_network_topology(\n  data = datExpr\n)\n\n\nPerforming network topology analysis to pick \n  soft-thresholding power...\n   Power SFT.R.sq   slope truncated.R.sq mean.k. median.k. max.k.\n1      1   0.7170  1.8500          0.644  1840.0    2050.0   2390\n2      2   0.4340  0.5310          0.640  1280.0    1460.0   1970\n3      3   0.0697  0.1310          0.908   981.0    1100.0   1710\n4      4   0.0147 -0.0516          0.932   789.0     860.0   1520\n5      5   0.1640 -0.1660          0.871   655.0     686.0   1370\n6      6   0.3510 -0.2500          0.841   556.0     557.0   1250\n7      7   0.5100 -0.3140          0.824   480.0     458.0   1150\n8      8   0.6400 -0.3720          0.839   420.0     379.0   1070\n9      9   0.7400 -0.4140          0.857   372.0     319.0    995\n10    10   0.7990 -0.4530          0.859   331.0     270.0    931\n11    12   0.8650 -0.5220          0.861   269.0     198.0    825\n12    14   0.8840 -0.5770          0.862   223.0     148.0    740\n13    16   0.8920 -0.6230          0.862   189.0     113.0    669\n14    18   0.8870 -0.6720          0.857   162.0      87.2    610\n15    20   0.8930 -0.7060          0.870   140.0      68.7    559\n16    22   0.9060 -0.7350          0.891   122.0      54.9    516\n17    24   0.9000 -0.7690          0.890   108.0      44.8    478\n18    26   0.8820 -0.8050          0.876    95.8      36.6    444\n19    28   0.8810 -0.8300          0.883    85.6      30.6    414\n20    30   0.8880 -0.8520          0.891    77.0      25.5    388\nPlotting the resutls from the network topology analysis...\n\n\n\n\n\n\n\n\n\nDone.\n\n\n\nNOTE: The scale-free topology fit index reaches close to 1 (red horizontal line = 0.90) at a soft-thresholding-power == 9.\n\nNow, we can go ahead and create our adjacency matrix by power-transforming the similarity matrix (see WGCNA for more info).\n\n\nShow code\n## Specify the soft-thresholding-power\nsoft.power = 12\n\n# Construct adjacency matrix\n# TO DO: make function ----\nadj_matrix &lt;- WGCNA::adjacency.fromSimilarity(\n  sim_matrix,\n  power = soft.power,\n  type = \"signed\"\n) |&gt; \n  as.matrix()\n\nplot_sim_matrix(\n  matrix = adj_matrix\n)\n\n\nPlotting a chunk of the gene-gene similarity matrix with 200 genes."
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact",
    "section": "",
    "text": "Aman Prasanna\n\n\n\nBiplabendu (Billu) Das\nbiplabendu.das@gmail.com\nhttps://biplabendu.github.io/homepage/"
  }
]
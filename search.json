[
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact",
    "section": "",
    "text": "Aman Prasanna\n\n\n\nBiplabendu (Billu) Das\nbiplabendu.das@gmail.com\nhttps://biplabendu.github.io/homepage/"
  },
  {
    "objectID": "build_plot_gcn.html",
    "href": "build_plot_gcn.html",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "",
    "text": "Show code\nlibrary(dplyr)\nlibrary(dbplyr)\nlibrary(ggplot2)\nfor (i in list.files(here::here(\"R\"), full.names = TRUE)) {\n  source(i)\n}\n\n# SAMPLE NAME\n## specify sample name\nsample.names &lt;- c(\n  # dmel\n  \"dmel-head\",\n  # mmus\n  \"mmus-brain_stem\", \n  # panu\n  \"panu-hypothalamus\"\n)\n# sample.cycles &lt;- c(\"LD\", \"DD\")\n\n## SPECIFY THE DATASET TO BUILD GCN WITH\nwhich.sample &lt;- sample.names[2]\n\nwriteLines(\n  glue::glue(\"Sample: {which.sample}\")\n)\n\n\nSample: mmus-brain_stem"
  },
  {
    "objectID": "build_plot_gcn.html#qc",
    "href": "build_plot_gcn.html#qc",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "QC",
    "text": "QC\n\n\nShow code\ndatExpr %&gt;%\n  check_sample_quality()\n\n\n Flagging genes and samples with too many missing values...\n  ..step 1\nAll okay!\n\n\nShow code\ndatExpr %&gt;% \n  plot_sample_expression()\n\n\nVisualizing the log-transformed data"
  },
  {
    "objectID": "build_plot_gcn.html#qc-1",
    "href": "build_plot_gcn.html#qc-1",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "QC",
    "text": "QC\n\n\nShow code\ncat(\"Before power transformation:\")\n\n\nBefore power transformation:\n\n\nShow code\nplot_sim_matrix(\n  matrix = sim_matrix\n)\n\n\nPlotting a chunk of the gene-gene similarity matrix with 200 genes."
  },
  {
    "objectID": "build_plot_gcn.html#user-input-required--",
    "href": "build_plot_gcn.html#user-input-required--",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "USER INPUT REQUIRED —-",
    "text": "USER INPUT REQUIRED —-\nTo create the adjacency matrix, we need to first identify the soft-thresholding power (see WGCNA for more info).\n\n\nShow code\nsft &lt;- analyze_network_topology(\n  data = datExpr\n)\n\n\nPerforming network topology analysis to pick \n  soft-thresholding power...\n   Power SFT.R.sq   slope truncated.R.sq mean.k. median.k. max.k.\n1      1   0.7240  1.9500          0.654    4510    4900.0   6020\n2      2   0.5090  0.5730          0.389    2970    3230.0   4790\n3      3   0.0298  0.0544          0.363    2170    2280.0   4040\n4      4   0.2950 -0.1720          0.710    1690    1680.0   3510\n5      5   0.6060 -0.3070          0.785    1360    1280.0   3110\n6      6   0.7420 -0.3970          0.817    1130     995.0   2800\n7      7   0.8110 -0.4740          0.818     951     790.0   2540\n8      8   0.8540 -0.5280          0.841     815     634.0   2330\n9      9   0.8860 -0.5790          0.866     708     516.0   2140\n10    10   0.8960 -0.6210          0.868     621     424.0   1980\n11    12   0.9040 -0.6890          0.877     489     294.0   1730\n12    15   0.9040 -0.7770          0.886     359     182.0   1440\n13    18   0.8990 -0.8420          0.895     275     118.0   1220\n14    21   0.8930 -0.8910          0.899     216      80.2   1050\n\nPlotting resutls from the network topology analysis...\n\n\n\n\n\n\n\n\n\nDone.\n[ NOTE, FIGURE ]: Red horizontal line indicates a signed R^2 of 0.9\n\n\n\nNOTE: The scale-free topology fit index reaches close to 1 (red horizontal line) at a soft-thresholding-power of 8.\n\n\n\nShow code\nmy_estimate &lt;- sft$fitIndices |&gt; \n  filter(\n    SFT.R.sq &gt; 0.8 &\n      SFT.R.sq &lt;= 0.9,\n    Power &gt; 5 &\n      Power &lt; 14\n  ) |&gt; \n  arrange(\n    Power\n  ) |&gt; \n  head(1) |&gt; \n  pull(1)\n\n\nNow, we can go ahead and create our adjacency matrix by power-transforming the similarity matrix (see WGCNA for more info).\n\n\nShow code\n## Specify the soft-thresholding-power\nsoft.power = if_else(\n  sft$powerEstimate &lt; 16,\n  max(sft$powerEstimate, my_estimate),\n  my_estimate\n)\n\ncat(\"Selected soft-power:\", soft.power)\n\n\nSelected soft-power: 8\n\n\nShow code\n# Construct adjacency matrix\n# TO DO: make function ----\nadj_matrix &lt;- WGCNA::adjacency.fromSimilarity(\n  sim_matrix,\n  power = soft.power,\n  type = \"signed\"\n) |&gt; \n  as.matrix()\n\ncat(\"After power transformation:\")\n\n\nAfter power transformation:\n\n\nShow code\nplot_sim_matrix(\n  matrix = adj_matrix\n)\n\n\nPlotting a chunk of the gene-gene similarity matrix with 200 genes."
  },
  {
    "objectID": "build_plot_gcn.html#comparison",
    "href": "build_plot_gcn.html#comparison",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "Comparison",
    "text": "Comparison\n\nModules vs. Rhythmic genes\n\n\n\nShow code\nwriteLines(\"#####################################################\nHow many genes are in each of my geneset of interest?\n#####################################################\")\n\n\n#####################################################\nHow many genes are in each of my geneset of interest?\n#####################################################\n\n\nShow code\n## MAKE YOUR LIST OF GENES OF INTEREST ##\n\n# LIST ONE - WGCNA modules\nlist1 &lt;- l_module_genes\nwriteLines(\"List of interesting genes #1\n----------------------------\nGenes in each of the identified gene-clusters or modules\")\n\n\nList of interesting genes #1\n----------------------------\nGenes in each of the identified gene-clusters or modules\n\n\nShow code\nsapply(list1, length)\n\n\n  C1   C2   C3   C4   C5   C6   C7   C8   C9  C10  C11  C12  C13  C14 \n 154  163 3195  105  748  146   54  796 2462  440  194   61   50  325 \n\n\nShow code\n## LIST TWO - rhythmic genes\nlist2 &lt;- l_rhy_genes\nwriteLines(\"List of interesting genes #2\n----------------------------\nRhythmic genes identified by different algorithms\")\n\n\nList of interesting genes #2\n----------------------------\nRhythmic genes identified by different algorithms\n\n\nShow code\nsapply(list2, length)\n\n\n      ARS    empJTK GeneCycle       JTK    meta2d      RAIN \n     1010       361       368       198       783       687 \n\n\nShow code\n## CHECK FOR OVERLAP\n# define size of genome\nsize = length(unique(c(unlist(list1), unlist(list2))))\n# make a GOM object\ngom.1v2 &lt;- GeneOverlap::newGOM(\n  list2, \n  list1,\n  genome.size = size\n)\n# png(paste0(path_to_repo, \"/results/figures/\",\n#            \"02_pogo_GCN/\",\n#            sample.name[1],\"_gom_1v2.png\"),\n#     width = 35, height = 15, units = \"cm\", res = 300)\nGeneOverlap::drawHeatmap(\n  gom.1v2,\n  adj.p = TRUE,\n  cutoff=0.05,\n  what=\"odds.ratio\",\n  # what=\"Jaccard\",\n  log.scale = T,\n  note.col = \"black\",\n  grid.col = \"Oranges\"\n)\n\n\n\n\n\n\n\n\n\nShow code\n# trash &lt;- dev.off()\n\n # writeLines(\"How many genes exactly are overlapping between the pairwise comparisons\")\n# getMatrix(gom.1v4, name = \"intersection\") %&gt;% t()\n\nwriteLines(\"Visualizing the significant overlaps between your lists of interesting genes and the identified modules\")\n\n\nVisualizing the significant overlaps between your lists of interesting genes and the identified modules"
  },
  {
    "objectID": "build_plot_gcn.html#intramodular-connectivity",
    "href": "build_plot_gcn.html#intramodular-connectivity",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "Intramodular connectivity",
    "text": "Intramodular connectivity\n“We begin by calculating the intramodular connectivity for each gene. (In network literature, connectivity is often referred to as”degree”.) The function intramodularConnectivity computes:\n\nthe whole network connectivity kTotal,\nthe within (intra)module connectivity kWithin,\nthe extra-modular connectivity kOut=kTotal-kWithin, and\nthe difference of the intra- and extra-modular connectivities kDiff = kIn - kOut = 2*kIN-kTotal\n\n\n\nShow code\n# From what I can tell, colorh1 in the tutorial refers to moduleColors\ncolorh1 &lt;- merge$colors\n\n# Calculate the connectivities of the genes\nAlldegrees1 = WGCNA::intramodularConnectivity(\n  adjMat = adj_matrix, \n  colors = colorh1\n) |&gt; \n  tibble::rownames_to_column(\"gene_name\") |&gt;  \n    mutate(\n      across(\n        matches(\"^k\"),\n        ~ round(.x, 2)\n      )\n    )\n\n\n\nCalculate the signed kME and display the first few rows/columns.\n\n\n\nShow code\ndatKME = WGCNA::signedKME(\n  datExpr, \n  merge[[\"modules\"]]$newMEs, \n  outputColumnName = \"\"\n)\n# # Display the first few rows of the data frame\n# datKME[1:6,1:6]\n\n\nPlotting the mean (± 95% CI) connectivity of genes in different modules\n\n\nShow code\npd &lt;- position_dodge(0.1)\n\n# which_var &lt;- \"kTotal\"\nwhich_var &lt;- c(\"kTotal\", \"kWithin\", \"kOut\", \"kDiff\")\n\nAlldegrees1 |&gt;  \n  # rownames_to_column(\"gene_name\") %&gt;% \n  left_join(\n    module_genes, \n    join_by(gene_name)\n  ) |&gt; \n  # PLOT FROM RAW DATA\n  mutate(\n    module_identity = factor(\n      module_identity, \n      levels = paste0(\n        \"C\",\n        sort(\n          unique(module_genes$module_identity) |&gt; \n            stringr::str_replace(\"C\", \"\") |&gt; \n            as.integer()\n        )\n      ) |&gt; rev()\n    )\n  ) |&gt; \n  summarySE(\n    measurevar = which_var, \n    groupvars = \"module_identity\"\n  ) |&gt; \n  mutate(\n    type = factor(\n      type,\n      levels = which_var\n    )\n  ) |&gt; \n  # Plot\n  ggplot(\n    aes(\n      y = module_identity, \n      x = mean,\n      group = interaction(module_identity, type)\n    )\n  ) +\n  geom_vline(xintercept = 0, col = \"maroon\", alpha = 0.7) +\n  labs(\n    y = \"\",\n    x = glue::glue(\n      \"Connectivity\"\n    ),\n    title = \"\"\n  ) +\n  ## Add error bar here\n  geom_errorbar(\n    aes(xmin = mean-ci, xmax = mean+ci),\n    width = 0.3, \n    position=pd, \n    lwd = 1.3,\n    col=\"black\", \n    alpha = 1\n  ) +\n  # Add the points on top of the error bars\n  geom_point(\n    position = pd, \n    size = 3,\n    col = \"black\", \n    fill = \"orange\",\n    show.legend = F, \n    pch = 21,\n    alpha = 0.9\n  ) +\n  facet_wrap(\n    ~ type,\n    nrow = 2\n  ) +\n  scale_x_continuous(\n    n.breaks = 4\n  ) +\n  theme_bw(25) +\n  # scale_color_manual(values=c(\"#F20505\",\"#F5D736\",\"#0FBF67\")) +\n  theme(\n    legend.position = \"none\"\n  )"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Compare time-course gene expression across species",
    "section": "",
    "text": "This website contain analyses by Aman and Billu for an on-going project that compares time-series gene expression data across species.\nMajority of the data sets used are from the paper by Laloum and Robinson-Rechavi (add reference here)."
  },
  {
    "objectID": "index.html#some-issues",
    "href": "index.html#some-issues",
    "title": "Compare time-course gene expression across species",
    "section": "Some issues:",
    "text": "Some issues:\nNot all of the above Cflo genes are 1:1 orthologs, some likely have paralogs in other species.\n\n\nFor how many ant genes, there are ≥ 2 genes in at least one more species?\n\n\n\nNumber of 1:1 orthlogs between Cflo and other species\n\n\nCflo:other species (orthology)\nNumber of genes\n\n\n\n\n1:1\n2257\n\n\n1:n possible\n368"
  }
]
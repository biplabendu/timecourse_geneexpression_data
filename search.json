[
  {
    "objectID": "build_plot_gcn_compare_tissues.html",
    "href": "build_plot_gcn_compare_tissues.html",
    "title": "Compare time-course gene expression data across tissues",
    "section": "",
    "text": "Show code\nlibrary(dplyr)\nlibrary(dbplyr)\nlibrary(ggplot2)\nfor (i in list.files(here::here(\"R\"), full.names = TRUE)) {\n  source(i)\n}\n\n# SAMPLE NAME\n## specify sample name\nsample.names &lt;- c(\n  # dmel\n  # \"dmel-head\",\n  # \"dmel-body\",\n  # \"dmel-heart\"\n  # # mmus\n  \"mmus-brain_stem\", \n  \"mmus-cerebellum\", \n  \"mmus-hypothalamus\", \n  \"mmus-heart\"\n  # # panu\n  # \"panu-brain_stem\",\n  # \"panu-cerebellum\",\n  # \"panu-hypothalamus\",\n  # \"panu-heart\",\n  # \"panu-scn\"\n)\n# sample.cycles &lt;- c(\"LD\", \"DD\")\n\n## SPECIFY THE DATASET TO BUILD GCN WITH\nwhich.sample &lt;- sample.names[1]\n\nwriteLines(\n  glue::glue(\"Reference tissue: {which.sample}\")\n)\n\n\nReference tissue: mmus-brain_stem\nStructure of reference tissue data:"
  },
  {
    "objectID": "build_plot_gcn_compare_tissues.html#make-and-plot-modules",
    "href": "build_plot_gcn_compare_tissues.html#make-and-plot-modules",
    "title": "Compare time-course gene expression data across tissues",
    "section": "Make and plot modules",
    "text": "Make and plot modules\n\n\nShow code\n# mods &lt;- purrr::map(\n#   sample.names,\n#   ~ timecourseRnaseq::make_modules(\n#       data = tidydata.db[[.x]],\n#       log2 = TRUE,\n#       id_column = \"gene_name\",\n#       min_expression = NULL,  # automatically estimated\n#       min_timepoints = NULL,  # automatically estimated\n#       method = \"wgcna\",\n#       qc = TRUE,\n#       sim_method = \"kendall\",\n#       soft_power = 15,      # automatically estimated\n#       min_module_size = 50,\n#       max_modules = 16,\n#       merge_cutoff_similarity = 0.9,\n#       plot_network_min_edge = 0.5,\n#       plot_network = FALSE,\n#       tidy_modules = TRUE\n#     )\n# ) |&gt;\n#   setNames(\n#     sample.names\n#   )\n\nmods &lt;- timecourseRnaseq::make_modules(\n  data = tidydata.db[[which.sample]],\n  log2 = TRUE,\n  id_column = \"gene_name\",\n  min_expression = NULL,  # automatically estimated\n  min_timepoints = NULL,  # automatically estimated\n  method = \"wgcna\",\n  qc = TRUE,\n  sim_method = \"kendall\",\n  soft_power = NULL,      # automatically estimated\n  min_module_size = 50,\n  max_modules = 16,\n  merge_cutoff_similarity = 0.9,\n  plot_network = FALSE,\n  # plot_network_min_edge = 0.5, # only used when `plot_network == TRUE`\n  tidy_modules = TRUE\n  )\n\n\n---------------------------------------------------\n1. Log2-transform and subset \n---------------------------------------------------\nApplying log2-transformation...Done.\nEstimated min_expression = 8 \nEstimated min_timepoints = 6 \nSubsetting data...Done.\n[ NOTE ]: After subsetting, 8893 of 17406 rows remain.\n\n Flagging genes and samples with too many missing values...\n  ..step 1\nAll okay!Visualizing the log-transformed data\n---------------------------------------------------\n2. Calculate similarity of expression \n---------------------------------------------------\nRunning gene-gene similarity...Done.\n\n\n---------------------------------------------------\n3. Create adjacency matrix \n---------------------------------------------------\nPerforming network topology analysis to pick\n  soft-thresholding power...\n   Power SFT.R.sq   slope truncated.R.sq mean.k. median.k. max.k.\n1      1   0.7240  1.9500          0.654    4510    4900.0   6020\n2      2   0.5090  0.5730          0.389    2970    3230.0   4790\n3      3   0.0298  0.0544          0.363    2170    2280.0   4040\n4      4   0.2950 -0.1720          0.710    1690    1680.0   3510\n5      5   0.6060 -0.3070          0.785    1360    1280.0   3110\n6      6   0.7420 -0.3970          0.817    1130     995.0   2800\n7      7   0.8110 -0.4740          0.818     951     790.0   2540\n8      8   0.8540 -0.5280          0.841     815     634.0   2330\n9      9   0.8860 -0.5790          0.866     708     516.0   2140\n10    10   0.8960 -0.6210          0.868     621     424.0   1980\n11    12   0.9040 -0.6890          0.877     489     294.0   1730\n12    15   0.9040 -0.7770          0.886     359     182.0   1440\n13    18   0.8990 -0.8420          0.895     275     118.0   1220\n14    21   0.8930 -0.8910          0.899     216      80.2   1050\n\nPlotting resutls from the network topology analysis...\n\n\n\n\n\n\n\n\n\nDone.\n[ NOTE, FIGURE ]: Red horizontal line indicates a signed R^2 of 0.9\n\nSetting soft-thresholding power to: 8.\nPower-transforming the gene-gene similarity matrix...Done.\n\n---------------------------------------------------\n4. Convert into topological overlap matrix (dissTOM) \n---------------------------------------------------\nCreating dissTOM...Done.\nPerforming hierarchical clustering on dissTOM...Done.\n\n---------------------------------------------------\n5. Identify modules (clusters) \n---------------------------------------------------\nMerging modules that have a correlation ≥ 0.9 ...Done.\n[ NOTE, FIGURE ] Plotting identified clusters before and after merging.\n\n\n\n\n\n\n\n\n\nModule (cluster) size:\nmergedColors\n antiquewhite4        bisque4           blue         coral1         coral2 \n           215            669           1938             60            287 \n          cyan    darkmagenta darkolivegreen    darkorange2        darkred \n           337            117            435             96            157 \n darkseagreen4  darkslateblue    floralwhite         grey60      honeydew1 \n            61             87             97            172            388 \n         ivory lavenderblush3      lightcyan     lightcyan1     lightgreen \n            98            155            174             98            165 \n       magenta   mediumorchid  mediumpurple3   navajowhite2         orange \n           202             55            105             76            154 \n    orangered4  paleturquoise palevioletred3           pink          plum1 \n           108            123            301            623            110 \n        purple            red         salmon        skyblue       skyblue2 \n           199            234            186            127             54 \n     steelblue          white        yellow4    yellowgreen \n           123            146             50            111 \nMerging modules that have a correlation ≥ 0.85 ...Done.\n[ NOTE, FIGURE ] Plotting identified clusters before and after merging.\n\n\n\n\n\n\n\n\n\nModule (cluster) size:\nmergedColors\n       bisque4         coral1       darkgrey    darkmagenta    darkorange2 \n          1397            440           3195            117            194 \n       darkred  darkseagreen4         grey60          ivory        magenta \n           157             61            172            672            325 \n  mediumorchid  mediumpurple3   navajowhite2         orange palevioletred3 \n           163            105             76            154            736 \n         plum1    saddlebrown        skyblue       skyblue2          white \n           110            287            282             54            146 \n       yellow4 \n            50 \nMerging modules that have a correlation ≥ 0.8 ...Done.\n[ NOTE, FIGURE ] Plotting identified clusters before and after merging.\n\n\nModule (cluster) size:\nmergedColors\n      bisque4          blue        coral1   darkmagenta   darkorange2 \n         2462          3195           440           796           194 \ndarkseagreen4         ivory       magenta  mediumorchid mediumpurple3 \n           61           748           325           163           105 \n       orange      skyblue2         white       yellow4 \n          154            54           146            50 \n\nCutoff used: 0.8 \nNumber of modules identified: 14 \n\nCalculating module-module similarity based\n  on module-eigengene-expression...Done.\nTidying module names...Done.\nPlotting adjacency matrix for module-module similarity...\n\n\n\n\n\n\n\n\n\n---------------------------------------------------\n6. Tidy modules (clusters) \n---------------------------------------------------"
  },
  {
    "objectID": "build_plot_gcn_compare_tissues.html#modify-network-plot",
    "href": "build_plot_gcn_compare_tissues.html#modify-network-plot",
    "title": "Compare time-course gene expression data across tissues",
    "section": "Modify network plot",
    "text": "Modify network plot\n\nInternal function; use ::: to call\n\n\n\nShow code\n# trash &lt;- purrr::map(\n#   which.sample,\n#   ~ timecourseRnaseq:::plot_adj_as_network(\n#       matrix = mods[[.x]][[\"adj_matrix_ME\"]][[\"ME\"]],\n#       # layout = igraph::layout.sugiyama,\n#       layout = igraph::layout_in_circle, # changed \n#       min_edge = 0.6,\n#       node_label_size = 1.2,\n#       node_size = 20,\n#       edge_size = 3,\n#       node_frame_col = \"grey20\",\n#       node_fill_col = \"grey80\",\n#       vertex.frame.width = 3\n#     )\n# )\n\ntimecourseRnaseq:::plot_adj_as_network(\n  matrix = mods[[\"adj_matrix_ME\"]][[\"ME\"]],\n  # layout = igraph::layout.sugiyama,\n  layout = igraph::layout_in_circle, # changed \n  min_edge = 0.6,\n  node_label_size = 1.2,\n  node_size = 30,\n  edge_size = 3,\n  node_frame_col = \"grey20\",\n  node_fill_col = \"grey80\",\n  vertex.frame.width = 3\n)\n\n\nVisualizing a simplified representation of the circadian GCN"
  },
  {
    "objectID": "build_plot_gcn_compare_tissues.html#identify-rhythmic-modules",
    "href": "build_plot_gcn_compare_tissues.html#identify-rhythmic-modules",
    "title": "Compare time-course gene expression data across tissues",
    "section": "Identify rhythmic modules",
    "text": "Identify rhythmic modules\n\n\nShow code\ndb_rhy &lt;- purrr::map(\n  sample.names,\n  ~ load_rhy_genes(\n      sample = .x\n    )\n) |&gt; \n  setNames(sample.names)\n\n# l_module_genes &lt;- purrr::map(\n#   sample.names,\n#   ~ module_genes[[.x]] |&gt; \n#     arrange(module_identity) |&gt; \n#     group_split(module_identity) |&gt; \n#     purrr::map(\n#       ~ .x |&gt; pull(gene_name)\n#     ) |&gt; \n#     setNames(unique(module_genes[[.x]]$module_identity))\n# ) |&gt; \n#   setNames(sample.names)\n\nl_module_genes &lt;- module_genes |&gt; \n  arrange(module_identity) |&gt; \n  group_split(module_identity) |&gt; \n  purrr::map(\n    ~ .x |&gt; pull(gene_name)\n  ) |&gt; \n  setNames(unique(module_genes$module_identity))\n\n###-###-###-###-###-###-###-###-\n# Set your p-value of choice\n# col_pval = \"BH.Q\"\ncol_pval = \"default.pvalue\"\n# col_pval = \"raw.pvalue\"\n###-###-###-###-###-###-###-###-\n\nl_rhy_genes &lt;- purrr::map(\n  sample.names,\n  ~ db_rhy[[.x]] |&gt; \n    purrr::map(\n      ~ .x |&gt; \n        filter(\n          if_all(\n            all_of(col_pval),\n            ~ .x &lt; 0.05\n          )\n        ) |&gt; \n        filter(\n          ID %in% unlist(l_module_genes)\n        ) |&gt; \n        pull(1) |&gt; \n        unique()\n    ) |&gt; \n    purrr::compact()\n) |&gt; \n  setNames(sample.names)\n\n\n\nModules vs. Rhythmic genes\n\n\n\nShow code\n# LIST ONE - WGCNA modules\nlist1 &lt;- l_module_genes\nsapply(list1, length) |&gt; print()\n\n\n  C1   C2   C3   C4   C5   C6   C7   C8   C9  C10  C11  C12  C13  C14 \n 154  163 3195  105  748  146   54  796 2462  440  194   61   50  325 \n\n\nShow code\ntrash &lt;- purrr::map(\n  sample.names,\n  function(x) {\n    cat(\"Tissue:\", x, \"\\n\")\n    \n    ## LIST TWO - rhythmic genes\n    list2 &lt;- l_rhy_genes[[x]]\n    sapply(list2, length) |&gt; print()\n    \n    ## CHECK FOR OVERLAP\n    # define size of genome\n    size = length(unique(c(unlist(list1), unlist(list2))))\n    # make a GOM object\n    gom.1v2 &lt;- GeneOverlap::newGOM(\n      list2, \n      list1,\n      genome.size = size\n    )\n    GeneOverlap::drawHeatmap(\n      gom.1v2,\n      adj.p = TRUE,\n      cutoff = 0.05,\n      what = \"odds.ratio\",\n      # what=\"Jaccard\",\n      log.scale = T,\n      note.col = \"black\",\n      grid.col = \"Oranges\"\n    )\n    \n    gom.1v2\n  }\n)\n\n\nTissue: mmus-brain_stem \n      ARS    empJTK GeneCycle       JTK    meta2d      RAIN \n     1010       361       368       198       783       687 \n\n\n\n\n\n\n\n\n\nTissue: mmus-cerebellum \n      ARS    empJTK GeneCycle       JTK    meta2d      RAIN \n     2663       701       641       241      1952       593 \n\n\n\n\n\n\n\n\n\nTissue: mmus-hypothalamus \n      ARS    empJTK GeneCycle       JTK    meta2d      RAIN \n     2042       559       481       223      1294       609 \n\n\n\n\n\n\n\n\n\nTissue: mmus-heart \n      ARS    empJTK GeneCycle       JTK    meta2d      RAIN \n     2550       987       785       532      2251      1316"
  },
  {
    "objectID": "build_plot_gcn_oneshot.html",
    "href": "build_plot_gcn_oneshot.html",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "",
    "text": "Show code\nlibrary(dplyr)\nlibrary(dbplyr)\nlibrary(ggplot2)\nfor (i in list.files(here::here(\"R\"), full.names = TRUE)) {\n  source(i)\n}\n\n# SAMPLE NAME\n## specify sample name\nsample.names &lt;- c(\n  # dmel\n  \"dmel-head\",\n  \"dmel-body\",\n  \"dmel-heart\",\n  # mmus\n  \"mmus-brain_stem\", \n  \"mmus-cerebellum\", \n  \"mmus-hypothalamus\", \n  \"mmus-heart\", \n  # panu\n  \"panu-brain_stem\",\n  \"panu-cerebellum\",\n  \"panu-hypothalamus\",\n  \"panu-heart\",\n  \"panu-scn\"\n)\n# sample.cycles &lt;- c(\"LD\", \"DD\")\n\n## SPECIFY THE DATASET TO BUILD GCN WITH\nwhich.sample &lt;- \"panu-scn\"\n\nwriteLines(\n  glue::glue(\"Sample: {which.sample}\")\n)\n\n\nSample: panu-scn\nStructure of input data:"
  },
  {
    "objectID": "build_plot_gcn_oneshot.html#make-and-plot-modules",
    "href": "build_plot_gcn_oneshot.html#make-and-plot-modules",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "Make and plot modules",
    "text": "Make and plot modules\n\n\nShow code\nmods &lt;- timecourseRnaseq::make_modules(\n  data = data.db[[which.sample]],\n  log2 = TRUE,\n  id_column = \"gene_name\",\n  min_expression = NULL,  # automatically estimated\n  min_timepoints = NULL,  # automatically estimated\n  method = \"wgcna\",\n  qc = TRUE,\n  sim_method = \"kendall\",\n  soft_power = NULL,      # automatically estimated\n  min_module_size = 50,\n  max_modules = 16,\n  merge_cutoff_similarity = 0.9,\n  plot_network_min_edge = 0.5,\n  plot_network = FALSE,\n  tidy_modules = TRUE\n  )\n\n\n---------------------------------------------------\n1. Log2-transform and subset \n---------------------------------------------------\nApplying log2-transformation...Done.\nEstimated min_expression = 3 \nEstimated min_timepoints = 8 \nSubsetting data...Done.\n[ NOTE ]: After subsetting, 5186 of 15806 rows remain.\n\n Flagging genes and samples with too many missing values...\n  ..step 1\nAll okay!Visualizing the log-transformed data\n---------------------------------------------------\n2. Calculate similarity of expression \n---------------------------------------------------\nRunning gene-gene similarity...Done.\n\n\n---------------------------------------------------\n3. Create adjacency matrix \n---------------------------------------------------\nPerforming network topology analysis to pick\n  soft-thresholding power...\n   Power SFT.R.sq  slope truncated.R.sq mean.k. median.k. max.k.\n1      1   0.8300  2.660          0.980  2170.0    2210.0   2930\n2      2   0.5320  0.790          0.908  1230.0    1240.0   2060\n3      3   0.0279  0.103          0.716   804.0     790.0   1570\n4      4   0.1700 -0.255          0.691   565.0     539.0   1260\n5      5   0.4450 -0.460          0.777   418.0     384.0   1030\n6      6   0.5980 -0.608          0.835   321.0     283.0    868\n7      7   0.6760 -0.696          0.866   253.0     215.0    741\n8      8   0.7370 -0.773          0.895   204.0     167.0    641\n9      9   0.7770 -0.839          0.913   168.0     131.0    562\n10    10   0.8130 -0.888          0.933   139.0     105.0    496\n11    12   0.8460 -0.973          0.948   100.0      68.1    398\n12    15   0.8700 -1.070          0.966    65.1      38.7    301\n13    18   0.8770 -1.170          0.971    44.9      23.5    240\n14    21   0.8710 -1.250          0.969    32.3      15.0    197\n\nPlotting resutls from the network topology analysis...\n\n\n\n\n\n\n\n\n\nDone.\n[ NOTE, FIGURE ]: Red horizontal line indicates a signed R^2 of 0.9\n\nSetting soft-thresholding power to: 15.\nPower-transforming the gene-gene similarity matrix...Done.\n\n---------------------------------------------------\n4. Convert into topological overlap matrix (dissTOM) \n---------------------------------------------------\nCreating dissTOM...Done.\nPerforming hierarchical clustering on dissTOM...Done.\n\n---------------------------------------------------\n5. Identify modules (clusters) \n---------------------------------------------------\nMerging modules that have a correlation ≥ 0.9 ...Done.\n[ NOTE, FIGURE ] Plotting identified clusters before and after merging.\n\n\n\n\n\n\n\n\n\nModule (cluster) size:\nmergedColors\n          blue          brown           cyan      darkgreen       darkgrey \n           730            294            152            115            113 \n   darkmagenta darkolivegreen     darkorange        darkred  darkturquoise \n            62             74            111            285            114 \n        grey60      lightcyan     lightgreen    lightyellow        magenta \n           130            139            125            120            173 \n        orange  paleturquoise           pink            red      royalblue \n           112             80            678            221            119 \n   saddlebrown         salmon        skyblue      steelblue      turquoise \n            87            160            439             83            391 \n        violet \n            79 \nMerging modules that have a correlation ≥ 0.85 ...Done.\n[ NOTE, FIGURE ] Plotting identified clusters before and after merging.\n\n\n\n\n\n\n\n\n\nModule (cluster) size:\nmergedColors\n         brown           cyan      darkgreen       darkgrey    darkmagenta \n           294            152            234           1126             62 \ndarkolivegreen     darkorange        darkred  darkturquoise         grey60 \n            74            111            285            114            130 \n     lightcyan     lightgreen    lightyellow        magenta         orange \n           243            125            120            173            112 \n paleturquoise            red    saddlebrown      steelblue      turquoise \n            80           1111             87             83            470 \nMerging modules that have a correlation ≥ 0.8 ...Done.\n[ NOTE, FIGURE ] Plotting identified clusters before and after merging.\n\n\nModule (cluster) size:\nmergedColors\n         brown           cyan      darkgreen    darkmagenta darkolivegreen \n           294            235            234             62             74 \n    darkorange  darkturquoise         grey60     lightgreen    lightyellow \n          1222            114            885            125           1489 \n       magenta         orange  paleturquoise    saddlebrown \n           173            112             80             87 \n\nCutoff used: 0.8 \nNumber of modules identified: 14 \n\nCalculating module-module similarity based\n  on module-eigengene-expression...Done.\nTidying module names...Done.\nPlotting adjacency matrix for module-module similarity...\n\n\n\n\n\n\n\n\n\n---------------------------------------------------\n6. Tidy modules (clusters) \n---------------------------------------------------\n\n\nShow code\n# \"Returned object\"\nmods |&gt; str(max.level = 1)\n\n\nList of 4\n $ modules      :List of 2\n $ module_genes : tibble [5,186 × 3] (S3: tbl_df/tbl/data.frame)\n $ adj_matrix   : 'AsIs' num [1:5186, 1:5186] 1.00 6.14e-03 3.44e-09 1.79e-14 1.36e-07 ...\n  ..- attr(*, \"dimnames\")=List of 2\n $ adj_matrix_ME:List of 2"
  },
  {
    "objectID": "build_plot_gcn_oneshot.html#modify-network-plot",
    "href": "build_plot_gcn_oneshot.html#modify-network-plot",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "Modify network plot",
    "text": "Modify network plot\n\nInternal function; use ::: to call\n\n\n\nShow code\ntimecourseRnaseq:::plot_adj_as_network(\n  matrix = mods[[\"adj_matrix_ME\"]][[\"ME\"]],\n  # layout = igraph::layout.sugiyama,\n  layout = igraph::layout_in_circle, # changed \n  min_edge = 0.6,\n  node_label_size = 1.2,\n  node_size = 20,\n  edge_size = 3,\n  node_frame_col = \"grey20\",\n  node_fill_col = \"grey80\",\n  vertex.frame.width = 3\n)\n\n\nVisualizing a simplified representation of the circadian GCN"
  },
  {
    "objectID": "build_plot_gcn_oneshot.html#identify-rhythmic-modules",
    "href": "build_plot_gcn_oneshot.html#identify-rhythmic-modules",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "Identify rhythmic modules",
    "text": "Identify rhythmic modules\n\n\nShow code\ndb_rhy &lt;- load_rhy_genes(\n  sample = which.sample\n)\n###-###-###-###-###-###-###-###-\n# Set your p-value of choice\n# col_pval = \"BH.Q\"\ncol_pval = \"default.pvalue\"\n# col_pval = \"raw.pvalue\"\n###-###-###-###-###-###-###-###-\nl_module_genes &lt;- module_genes |&gt; \n  arrange(module_identity) |&gt; \n  group_split(module_identity) |&gt; \n  purrr::map(\n    ~ .x |&gt; pull(gene_name)\n  ) |&gt; \n  setNames(unique(module_genes[[\"module_identity\"]]))\n\nl_rhy_genes &lt;- db_rhy |&gt; \n  purrr::map(\n    ~ .x |&gt; \n      filter(\n        if_all(\n          all_of(col_pval),\n          ~ .x &lt; 0.05\n        )\n      ) |&gt; \n      filter(\n        ID %in% unlist(l_module_genes)\n      ) |&gt; \n      pull(1) |&gt; \n      unique()\n  ) |&gt; \n  purrr::compact()"
  },
  {
    "objectID": "build_plot_gcn_oneshot.html#comparison",
    "href": "build_plot_gcn_oneshot.html#comparison",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "Comparison",
    "text": "Comparison\n\nModules vs. Rhythmic genes\n\n\n\nShow code\nwriteLines(\"#####################################################\nHow many genes are in each of my geneset of interest?\n#####################################################\")\n\n\n#####################################################\nHow many genes are in each of my geneset of interest?\n#####################################################\n\n\nShow code\n## MAKE YOUR LIST OF GENES OF INTEREST ##\n\n# LIST ONE - WGCNA modules\nlist1 &lt;- l_module_genes\nwriteLines(\"List of interesting genes #1\n----------------------------\nGenes in each of the identified gene-clusters or modules\")\n\n\nList of interesting genes #1\n----------------------------\nGenes in each of the identified gene-clusters or modules\n\n\nShow code\nsapply(list1, length)\n\n\n  C1   C2   C3   C4   C5   C6   C7   C8   C9  C10  C11  C12  C13  C14 \n 114  125  112   74   62  173  235 1489   87  885   80  234  294 1222 \n\n\nShow code\n## LIST TWO - rhythmic genes\nlist2 &lt;- l_rhy_genes\nwriteLines(\"List of interesting genes #2\n----------------------------\nRhythmic genes identified by different algorithms\")\n\n\nList of interesting genes #2\n----------------------------\nRhythmic genes identified by different algorithms\n\n\nShow code\nsapply(list2, length)\n\n\n      ARS    empJTK GeneCycle       JTK        LS    meta2d      RAIN \n      178       328       484       174         1       274       745 \n\n\nShow code\n## CHECK FOR OVERLAP\n# define size of genome\nsize = length(unique(c(unlist(list1), unlist(list2))))\n# make a GOM object\ngom.1v2 &lt;- GeneOverlap::newGOM(\n  list2, \n  list1,\n  genome.size = size\n)\n# png(paste0(path_to_repo, \"/results/figures/\",\n#            \"02_pogo_GCN/\",\n#            sample.name[1],\"_gom_1v2.png\"),\n#     width = 35, height = 15, units = \"cm\", res = 300)\nGeneOverlap::drawHeatmap(\n  gom.1v2,\n  adj.p = TRUE,\n  cutoff=0.05,\n  what=\"odds.ratio\",\n  # what=\"Jaccard\",\n  log.scale = T,\n  note.col = \"black\",\n  grid.col = \"Oranges\"\n)\n\n\n\n\n\n\n\n\n\nShow code\n# trash &lt;- dev.off()\n\n # writeLines(\"How many genes exactly are overlapping between the pairwise comparisons\")\n# getMatrix(gom.1v4, name = \"intersection\") %&gt;% t()\n\nwriteLines(\"Visualizing the significant overlaps between your lists of interesting genes and the identified modules\")\n\n\nVisualizing the significant overlaps between your lists of interesting genes and the identified modules"
  },
  {
    "objectID": "build_plot_gcn_oneshot.html#intramodular-connectivity",
    "href": "build_plot_gcn_oneshot.html#intramodular-connectivity",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "Intramodular connectivity",
    "text": "Intramodular connectivity\n“We begin by calculating the intramodular connectivity for each gene. (In network literature, connectivity is often referred to as”degree”.) The function intramodularConnectivity computes:\n\nthe whole network connectivity kTotal,\nthe within (intra)module connectivity kWithin,\nthe extra-modular connectivity kOut=kTotal-kWithin, and\nthe difference of the intra- and extra-modular connectivities kDiff = kIn - kOut = 2*kIN-kTotal\n\n\n\nShow code\n# From what I can tell, colorh1 in the tutorial refers to moduleColors\ncolorh1 &lt;- mods[[\"modules\"]]$colors\nadj_matrix &lt;- mods[[\"adj_matrix\"]]\n\n# Calculate the connectivities of the genes\nAlldegrees1 = WGCNA::intramodularConnectivity(\n  adjMat = adj_matrix, \n  colors = colorh1\n) |&gt; \n  mutate(\n    gene_name = rownames(adj_matrix),\n    across(\n      matches(\"^k\"),\n      ~ round(.x, 2)\n    )\n  ) |&gt; \n  glimpse()\n\n\nRows: 5,186\nColumns: 5\n$ kTotal    &lt;dbl&gt; 16.15, 39.72, 10.03, 65.04, 28.34, 14.51, 90.39, 27.68, 15.5…\n$ kWithin   &lt;dbl&gt; 5.25, 37.48, 8.05, 59.96, 12.64, 12.34, 86.71, 26.15, 12.28,…\n$ kOut      &lt;dbl&gt; 10.90, 2.24, 1.98, 5.09, 15.70, 2.16, 3.67, 1.53, 3.28, 3.41…\n$ kDiff     &lt;dbl&gt; -5.65, 35.24, 6.07, 54.87, -3.06, 10.18, 83.04, 24.61, 9.00,…\n$ gene_name &lt;chr&gt; \"ENSPANG00000000040\", \"ENSPANG00000000041\", \"ENSPANG00000000…\n\n\nPlotting the mean (± 95% CI) connectivity of genes in different modules\n\n\nShow code\npd &lt;- position_dodge(0.1)\n\n# which_var &lt;- \"kTotal\"\nwhich_var &lt;- c(\"kTotal\", \"kWithin\", \"kOut\", \"kDiff\")\n\nAlldegrees1 |&gt; \n  # rownames_to_column(\"gene_name\") %&gt;% \n  left_join(\n    module_genes, \n    join_by(gene_name)\n  ) |&gt; \n  glimpse() |&gt; \n  # PLOT FROM RAW DATA\n  mutate(\n    module_identity = factor(\n      module_identity, \n      levels = paste0(\n        \"C\",\n        sort(\n          unique(module_genes$module_identity) |&gt; \n            stringr::str_replace(\"C\", \"\") |&gt; \n            as.integer()\n        )\n      ) |&gt; rev()\n    )\n  ) |&gt; \n  summarySE(\n    measurevar = which_var, \n    groupvars = \"module_identity\"\n  ) |&gt; \n  mutate(\n    type = factor(\n      type,\n      levels = which_var\n    )\n  ) |&gt; \n  # Plot\n  ggplot(\n    aes(\n      y = module_identity, \n      x = mean,\n      group = interaction(module_identity, type)\n    )\n  ) +\n  geom_vline(xintercept = 0, col = \"maroon\", alpha = 0.7) +\n  labs(\n    y = \"\",\n    x = glue::glue(\n      \"Connectivity\"\n    ),\n    title = \"\"\n  ) +\n  ## Add error bar here\n  geom_errorbar(\n    aes(xmin = mean-ci, xmax = mean+ci),\n    width = 0.3, \n    position=pd, \n    lwd = 1.3,\n    col=\"black\", \n    alpha = 1\n  ) +\n  # Add the points on top of the error bars\n  geom_point(\n    position = pd, \n    size = 3,\n    col = \"black\", \n    fill = \"orange\",\n    show.legend = F, \n    pch = 21,\n    alpha = 0.9\n  ) +\n  facet_wrap(\n    ~ type,\n    nrow = 2,\n    scales = \"free_x\"\n  ) +\n  scale_x_continuous(\n    n.breaks = 4\n  ) +\n  theme_bw(25) +\n  # scale_color_manual(values=c(\"#F20505\",\"#F5D736\",\"#0FBF67\")) +\n  theme(\n    legend.position = \"none\"\n  )\n\n\nRows: 5,186\nColumns: 7\n$ kTotal          &lt;dbl&gt; 16.15, 39.72, 10.03, 65.04, 28.34, 14.51, 90.39, 27.68…\n$ kWithin         &lt;dbl&gt; 5.25, 37.48, 8.05, 59.96, 12.64, 12.34, 86.71, 26.15, …\n$ kOut            &lt;dbl&gt; 10.90, 2.24, 1.98, 5.09, 15.70, 2.16, 3.67, 1.53, 3.28…\n$ kDiff           &lt;dbl&gt; -5.65, 35.24, 6.07, 54.87, -3.06, 10.18, 83.04, 24.61,…\n$ gene_name       &lt;chr&gt; \"ENSPANG00000000040\", \"ENSPANG00000000041\", \"ENSPANG00…\n$ module_identity &lt;chr&gt; \"C10\", \"C5\", \"C3\", \"C3\", \"C7\", \"C5\", \"C3\", \"C5\", \"C5\",…\n$ old_labels      &lt;chr&gt; \"lightgreen\", \"grey60\", \"lightyellow\", \"lightyellow\", …"
  },
  {
    "objectID": "build_plot_gcn.html",
    "href": "build_plot_gcn.html",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "",
    "text": "Show code\nlibrary(dplyr)\nlibrary(dbplyr)\nlibrary(ggplot2)\nfor (i in list.files(here::here(\"R\"), full.names = TRUE)) {\n  source(i)\n}\n\n# SAMPLE NAME\n## specify sample name\nsample.names &lt;- c(\n  # dmel\n  \"dmel-head\",\n  # mmus\n  \"mmus-brain_stem\", \n  # panu\n  \"panu-hypothalamus\"\n)\n# sample.cycles &lt;- c(\"LD\", \"DD\")\n\n## SPECIFY THE DATASET TO BUILD GCN WITH\nwhich.sample &lt;- sample.names[1]\n\nwriteLines(\n  glue::glue(\"Sample: {which.sample}\")\n)\n\n\nSample: dmel-head"
  },
  {
    "objectID": "build_plot_gcn.html#input-data",
    "href": "build_plot_gcn.html#input-data",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "Input data",
    "text": "Input data\n|gene_name   |  ZT00|  ZT03|  ZT06|  ZT09|  ZT12|  ZT15|  ZT18|  ZT21|\n|:-----------|-----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|\n|FBgn0000008 | 4.852| 5.215| 4.281| 9.320| 7.119| 2.778| 7.372| 5.757|\n|FBgn0000008 | 4.663| 5.024| 4.115| 8.958| 6.904| 2.769| 7.086| 5.533|\n|FBgn0000014 | 0.039| 0.072| 3.509| 0.000| 0.056| 0.000| 0.016| 0.358|\n|FBgn0000015 | 0.000| 0.015| 4.928| 0.000| 0.000| 0.135| 0.000| 1.598|"
  },
  {
    "objectID": "build_plot_gcn.html#make-and-plot-modules",
    "href": "build_plot_gcn.html#make-and-plot-modules",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "Make and plot modules",
    "text": "Make and plot modules\n\n\nShow code\nmods &lt;- timecourseRnaseq::make_modules(\n  # data = data.db[[which.sample]],\n  data = data.db[[3]],\n  log2 = TRUE,\n  id_column = \"gene_name\",\n  min_expression = NULL,  # automatically estimated\n  min_timepoints = NULL,  # automatically estimated\n  method = \"wgcna\",\n  qc = FALSE,\n  sim_method = \"kendall\",\n  soft_power = NULL,      # automatically estimated\n  min_module_size = 50,\n  max_modules = 15,\n  merge_cutoff_similarity = 0.9,\n  plot_network_min_edge = 0.5,\n  plot_network = TRUE,\n  tidy_modules = FALSE\n  )\n\nmods |&gt; str(max.level = 1)"
  },
  {
    "objectID": "build_plot_gcn.html#modify-network-plot",
    "href": "build_plot_gcn.html#modify-network-plot",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "Modify network plot",
    "text": "Modify network plot\n\n\nShow code\nplot_adj_as_network(\n  matrix = mods[[\"adj_matrix_ME\"]][[\"ME\"]],\n  # layout = igraph::layout.sugiyama,\n  layout = igraph::layout_in_circle, # changed layout\n  min_edge = 0.6,\n  node_label_size = 1.2,\n  node_size = 20,\n  edge_size = 3,\n  node_frame_col = \"grey20\",\n  node_fill_col = \"grey80\",\n  vertex.frame.width = 3\n)"
  },
  {
    "objectID": "build_plot_gcn.html#qc",
    "href": "build_plot_gcn.html#qc",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "QC",
    "text": "QC\n\n\nShow code\ndatExpr %&gt;%\n  check_sample_quality()\n\n\n Flagging genes and samples with too many missing values...\n  ..step 1\nAll okay!\n\n\nShow code\ndatExpr %&gt;% \n  plot_sample_expression()\n\n\nVisualizing the log-transformed data"
  },
  {
    "objectID": "build_plot_gcn.html#qc-1",
    "href": "build_plot_gcn.html#qc-1",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "QC",
    "text": "QC\n\n\nShow code\ncat(\"Before power transformation:\")\n\n\nBefore power transformation:\n\n\nShow code\nplot_sim_matrix(\n  matrix = sim_matrix\n)\n\n\nPlotting a chunk of the gene-gene similarity matrix with 200 genes."
  },
  {
    "objectID": "build_plot_gcn.html#user-input-required--",
    "href": "build_plot_gcn.html#user-input-required--",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "USER INPUT REQUIRED —-",
    "text": "USER INPUT REQUIRED —-\nTo create the adjacency matrix, we need to first identify the soft-thresholding power (see WGCNA for more info).\n\n\nShow code\nsft &lt;- analyze_network_topology(\n  data = datExpr\n)\n\n\nPerforming network topology analysis to pick \n  soft-thresholding power...\n   Power SFT.R.sq    slope truncated.R.sq mean.k. median.k. max.k.\n1      1 0.968000  2.93000          0.959    1650      1730   2060\n2      2 0.951000  1.24000          0.937    1120      1180   1620\n3      3 0.918000  0.65200          0.896     851       879   1360\n4      4 0.878000  0.33300          0.849     683       691   1190\n5      5 0.650000  0.13500          0.578     569       572   1060\n6      6 0.000434 -0.00168         -0.237     486       483    966\n7      7 0.638000 -0.10600          0.549     422       416    887\n8      8 0.775000 -0.19400          0.710     373       364    822\n9      9 0.851000 -0.26000          0.808     333       322    766\n10    10 0.879000 -0.30900          0.846     300       287    718\n11    12 0.882000 -0.39800          0.852     248       230    638\n12    15 0.886000 -0.49000          0.870     195       171    550\n13    18 0.886000 -0.56000          0.888     159       134    483\n14    21 0.883000 -0.62100          0.892     133       106    431\n\nPlotting resutls from the network topology analysis...\n\n\n\n\n\n\n\n\n\nDone.\n[ NOTE, FIGURE ]: Red horizontal line indicates a signed R^2 of 0.9\n\n\n\nNOTE: The scale-free topology fit index reaches close to 1 (red horizontal line) at a soft-thresholding-power of 1.\n\n\n\nShow code\nmy_estimate &lt;- sft$fitIndices |&gt; \n  filter(\n    SFT.R.sq &gt; 0.8 &\n      SFT.R.sq &lt;= 0.9,\n    Power &gt; 6 &\n      Power &lt; 14\n  ) |&gt; \n  arrange(\n    Power\n  ) |&gt; \n  head(1) |&gt; \n  pull(1)\n\n\nNow, we can go ahead and create our adjacency matrix by power-transforming the similarity matrix (see WGCNA for more info).\n\n\nShow code\n## Specify the soft-thresholding-power\nsoft.power = if_else(\n  sft$powerEstimate &lt; 16,\n  max(sft$powerEstimate, my_estimate),\n  my_estimate\n)\n\ncat(\"Selected soft-power:\", soft.power)\n\n\nSelected soft-power: 9\n\n\nShow code\n# Construct adjacency matrix\n# TO DO: make function ----\nadj_matrix &lt;- WGCNA::adjacency.fromSimilarity(\n  sim_matrix,\n  power = soft.power,\n  type = \"signed\"\n) |&gt; \n  as.matrix()\n\ncat(\"After power transformation:\")\n\n\nAfter power transformation:\n\n\nShow code\nplot_sim_matrix(\n  matrix = adj_matrix\n)\n\n\nPlotting a chunk of the gene-gene similarity matrix with 200 genes."
  },
  {
    "objectID": "build_plot_gcn.html#comparison",
    "href": "build_plot_gcn.html#comparison",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "Comparison",
    "text": "Comparison\n\nModules vs. Rhythmic genes\n\n\n\nShow code\nwriteLines(\"#####################################################\nHow many genes are in each of my geneset of interest?\n#####################################################\")\n\n\n#####################################################\nHow many genes are in each of my geneset of interest?\n#####################################################\n\n\nShow code\n## MAKE YOUR LIST OF GENES OF INTEREST ##\n\n# LIST ONE - WGCNA modules\nlist1 &lt;- l_module_genes\nwriteLines(\"List of interesting genes #1\n----------------------------\nGenes in each of the identified gene-clusters or modules\")\n\n\nList of interesting genes #1\n----------------------------\nGenes in each of the identified gene-clusters or modules\n\n\nShow code\nsapply(list1, length)\n\n\n  C1   C2   C3   C4   C5 \n1250  654  503  636  118 \n\n\nShow code\n## LIST TWO - rhythmic genes\nlist2 &lt;- l_rhy_genes\nwriteLines(\"List of interesting genes #2\n----------------------------\nRhythmic genes identified by different algorithms\")\n\n\nList of interesting genes #2\n----------------------------\nRhythmic genes identified by different algorithms\n\n\nShow code\nsapply(list2, length)\n\n\n      ARS    empJTK GeneCycle       JTK    meta2d      RAIN \n      110       289       164        73       115       267 \n\n\nShow code\n## CHECK FOR OVERLAP\n# define size of genome\nsize = length(unique(c(unlist(list1), unlist(list2))))\n# make a GOM object\ngom.1v2 &lt;- GeneOverlap::newGOM(\n  list2, \n  list1,\n  genome.size = size\n)\n# png(paste0(path_to_repo, \"/results/figures/\",\n#            \"02_pogo_GCN/\",\n#            sample.name[1],\"_gom_1v2.png\"),\n#     width = 35, height = 15, units = \"cm\", res = 300)\nGeneOverlap::drawHeatmap(\n  gom.1v2,\n  adj.p = TRUE,\n  cutoff=0.05,\n  what=\"odds.ratio\",\n  # what=\"Jaccard\",\n  log.scale = T,\n  note.col = \"black\",\n  grid.col = \"Oranges\"\n)\n\n\n\n\n\n\n\n\n\nShow code\n# trash &lt;- dev.off()\n\n # writeLines(\"How many genes exactly are overlapping between the pairwise comparisons\")\n# getMatrix(gom.1v4, name = \"intersection\") %&gt;% t()\n\nwriteLines(\"Visualizing the significant overlaps between your lists of interesting genes and the identified modules\")\n\n\nVisualizing the significant overlaps between your lists of interesting genes and the identified modules"
  },
  {
    "objectID": "build_plot_gcn.html#intramodular-connectivity",
    "href": "build_plot_gcn.html#intramodular-connectivity",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "Intramodular connectivity",
    "text": "Intramodular connectivity\n“We begin by calculating the intramodular connectivity for each gene. (In network literature, connectivity is often referred to as”degree”.) The function intramodularConnectivity computes:\n\nthe whole network connectivity kTotal,\nthe within (intra)module connectivity kWithin,\nthe extra-modular connectivity kOut=kTotal-kWithin, and\nthe difference of the intra- and extra-modular connectivities kDiff = kIn - kOut = 2*kIN-kTotal\n\n\n\nShow code\n# From what I can tell, colorh1 in the tutorial refers to moduleColors\ncolorh1 &lt;- merge$colors\n\n# Calculate the connectivities of the genes\nAlldegrees1 = WGCNA::intramodularConnectivity(\n  adjMat = adj_matrix, \n  colors = colorh1\n) |&gt; \n  tibble::rownames_to_column(\"gene_name\") |&gt;  \n    mutate(\n      across(\n        matches(\"^k\"),\n        ~ round(.x, 2)\n      )\n    )\n\n\nPlotting the mean (± 95% CI) connectivity of genes in different modules\n\n\nShow code\npd &lt;- position_dodge(0.1)\n\n# which_var &lt;- \"kTotal\"\nwhich_var &lt;- c(\"kTotal\", \"kWithin\", \"kOut\", \"kDiff\")\n\nAlldegrees1 |&gt;  \n  # rownames_to_column(\"gene_name\") %&gt;% \n  left_join(\n    module_genes, \n    join_by(gene_name)\n  ) |&gt; \n  # PLOT FROM RAW DATA\n  mutate(\n    module_identity = factor(\n      module_identity, \n      levels = paste0(\n        \"C\",\n        sort(\n          unique(module_genes$module_identity) |&gt; \n            stringr::str_replace(\"C\", \"\") |&gt; \n            as.integer()\n        )\n      ) |&gt; rev()\n    )\n  ) |&gt; \n  summarySE(\n    measurevar = which_var, \n    groupvars = \"module_identity\"\n  ) |&gt; \n  mutate(\n    type = factor(\n      type,\n      levels = which_var\n    )\n  ) |&gt; \n  # Plot\n  ggplot(\n    aes(\n      y = module_identity, \n      x = mean,\n      group = interaction(module_identity, type)\n    )\n  ) +\n  geom_vline(xintercept = 0, col = \"maroon\", alpha = 0.7) +\n  labs(\n    y = \"\",\n    x = glue::glue(\n      \"Connectivity\"\n    ),\n    title = \"\"\n  ) +\n  ## Add error bar here\n  geom_errorbar(\n    aes(xmin = mean-ci, xmax = mean+ci),\n    width = 0.3, \n    position=pd, \n    lwd = 1.3,\n    col=\"black\", \n    alpha = 1\n  ) +\n  # Add the points on top of the error bars\n  geom_point(\n    position = pd, \n    size = 3,\n    col = \"black\", \n    fill = \"orange\",\n    show.legend = F, \n    pch = 21,\n    alpha = 0.9\n  ) +\n  facet_wrap(\n    ~ type,\n    nrow = 2,\n    scales = \"free_x\"\n  ) +\n  scale_x_continuous(\n    n.breaks = 4\n  ) +\n  theme_bw(25) +\n  # scale_color_manual(values=c(\"#F20505\",\"#F5D736\",\"#0FBF67\")) +\n  theme(\n    legend.position = \"none\"\n  )"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Compare time-course gene expression across species",
    "section": "",
    "text": "This website contain analyses by Aman and Billu for an on-going project that compares time-series gene expression data across species.\nMajority of the data sets used are from the paper by Laloum and Robinson-Rechavi (add reference here)."
  },
  {
    "objectID": "index.html#some-issues",
    "href": "index.html#some-issues",
    "title": "Compare time-course gene expression across species",
    "section": "Some issues:",
    "text": "Some issues:\nNot all of the above Cflo genes are 1:1 orthologs, some likely have paralogs in other species.\n\n\nFor how many ant genes, there are ≥ 2 genes in at least one more species?\n\n\n\nNumber of 1:1 orthlogs between Cflo and other species\n\n\nCflo:other species (orthology)\nNumber of genes\n\n\n\n\n1:1\n2257\n\n\n1:n possible\n368"
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact",
    "section": "",
    "text": "Aman Prasanna\n\n\n\nBiplabendu (Billu) Das\nbiplabendu.das@gmail.com\nhttps://biplabendu.github.io/homepage/"
  }
]
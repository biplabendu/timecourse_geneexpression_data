[
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact",
    "section": "",
    "text": "Aman Prasanna\n\n\n\nBiplabendu (Billu) Das\nbiplabendu.das@gmail.com\nhttps://biplabendu.github.io/homepage/"
  },
  {
    "objectID": "build_plot_gcn.html",
    "href": "build_plot_gcn.html",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "",
    "text": "Show code\nlibrary(dplyr)\nlibrary(dbplyr)\nlibrary(ggplot2)\nfor (i in list.files(here::here(\"R\"), full.names = TRUE)) {\n  source(i)\n}\n\n# SAMPLE NAME\n## specify sample name\nsample.names &lt;- c(\n  # dmel\n  \"dmel-head\",\n  # mmus\n  \"mmus-brain_stem\", \n  # panu\n  \"panu-hypothalamus\"\n)\n# sample.cycles &lt;- c(\"LD\", \"DD\")\n\n## SPECIFY THE DATASET TO BUILD GCN WITH\nwhich.sample &lt;- sample.names[2]\n\nwriteLines(\n  glue::glue(\"Sample: {which.sample}\")\n)\n\n\nSample: mmus-brain_stem"
  },
  {
    "objectID": "build_plot_gcn.html#qc",
    "href": "build_plot_gcn.html#qc",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "QC",
    "text": "QC\n\n\nShow code\ndatExpr %&gt;%\n  check_sample_quality()\n\n\n Flagging genes and samples with too many missing values...\n  ..step 1\nAll okay!\n\n\nShow code\ndatExpr %&gt;% \n  plot_sample_expression()\n\n\nVisualizing the log-transformed data"
  },
  {
    "objectID": "build_plot_gcn.html#qc-1",
    "href": "build_plot_gcn.html#qc-1",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "QC",
    "text": "QC\n\n\nShow code\ncat(\"Before power transformation:\")\n\n\nBefore power transformation:\n\n\nShow code\nplot_sim_matrix(\n  matrix = sim_matrix\n)\n\n\nPlotting a chunk of the gene-gene similarity matrix with 200 genes."
  },
  {
    "objectID": "build_plot_gcn.html#user-input-required--",
    "href": "build_plot_gcn.html#user-input-required--",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "USER INPUT REQUIRED —-",
    "text": "USER INPUT REQUIRED —-\nTo create the adjacency matrix, we need to first identify the soft-thresholding power (see WGCNA for more info).\n\n\nShow code\nsft &lt;- analyze_network_topology(\n  data = datExpr\n)\n\n\nPerforming network topology analysis to pick \n  soft-thresholding power...\n   Power SFT.R.sq   slope truncated.R.sq mean.k. median.k. max.k.\n1      1   0.7170  1.8500          0.644    1840    2050.0   2390\n2      2   0.4340  0.5310          0.640    1280    1460.0   1970\n3      3   0.0697  0.1310          0.908     981    1100.0   1710\n4      4   0.0147 -0.0516          0.932     789     860.0   1520\n5      5   0.1640 -0.1660          0.871     655     686.0   1370\n6      6   0.3510 -0.2500          0.841     556     557.0   1250\n7      7   0.5100 -0.3140          0.824     480     458.0   1150\n8      8   0.6400 -0.3720          0.839     420     379.0   1070\n9      9   0.7400 -0.4140          0.857     372     319.0    995\n10    10   0.7990 -0.4530          0.859     331     270.0    931\n11    12   0.8650 -0.5220          0.861     269     198.0    825\n12    15   0.8890 -0.6030          0.862     205     129.0    703\n13    18   0.8870 -0.6720          0.857     162      87.2    610\n14    21   0.9020 -0.7200          0.883     131      61.4    537\n\nPlotting resutls from the network topology analysis...\n\n\n\n\n\n\n\n\n\nDone.\n[ NOTE, FIGURE ]: Red horizontal line indicates a signed R^2 of 0.9\n\n\n\nNOTE: The scale-free topology fit index reaches close to 1 (red horizontal line) at a soft-thresholding-power of 12.\n\nNow, we can go ahead and create our adjacency matrix by power-transforming the similarity matrix (see WGCNA for more info).\n\n\nShow code\n## Specify the soft-thresholding-power\nsoft.power = sft$powerEstimate\n\n# Construct adjacency matrix\n# TO DO: make function ----\nadj_matrix &lt;- WGCNA::adjacency.fromSimilarity(\n  sim_matrix,\n  power = soft.power,\n  type = \"signed\"\n) |&gt; \n  as.matrix()\n\ncat(\"After power transformation:\")\n\n\nAfter power transformation:\n\n\nShow code\nplot_sim_matrix(\n  matrix = adj_matrix\n)\n\n\nPlotting a chunk of the gene-gene similarity matrix with 200 genes."
  },
  {
    "objectID": "build_plot_gcn.html#comparison",
    "href": "build_plot_gcn.html#comparison",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "Comparison",
    "text": "Comparison\n\nModules vs. Rhythmic genes\n\n\n\nShow code\nwriteLines(\"#####################################################\nHow many genes are in each of my geneset of interest?\n#####################################################\")\n\n\n#####################################################\nHow many genes are in each of my geneset of interest?\n#####################################################\n\n\nShow code\n## MAKE YOUR LIST OF GENES OF INTEREST ##\n\n# LIST ONE - WGCNA modules\nlist1 &lt;- l_module_genes\nwriteLines(\"List of interesting genes #1\n----------------------------\nGenes in each of the identified gene-clusters or modules\")\n\n\nList of interesting genes #1\n----------------------------\nGenes in each of the identified gene-clusters or modules\n\n\nShow code\nsapply(list1, length)\n\n\n  C1   C2   C3   C4   C5   C6   C7 \n1165  123  146  153   69   67 1622 \n\n\nShow code\n## LIST TWO - rhythmic genes\nlist2 &lt;- l_rhy_genes\nwriteLines(\"List of interesting genes #2\n----------------------------\nRhythmic genes identified by different algorithms\")\n\n\nList of interesting genes #2\n----------------------------\nRhythmic genes identified by different algorithms\n\n\nShow code\nsapply(list2, length)\n\n\n      ARS    empJTK GeneCycle       JTK    meta2d      RAIN \n      362       127       129        78       276       255 \n\n\nShow code\n## CHECK FOR OVERLAP\n# define size of genome\nsize = length(unique(c(unlist(list1), unlist(list2))))\n# make a GOM object\ngom.1v2 &lt;- GeneOverlap::newGOM(\n  list2, \n  list1,\n  genome.size = size\n)\n# png(paste0(path_to_repo, \"/results/figures/\",\n#            \"02_pogo_GCN/\",\n#            sample.name[1],\"_gom_1v2.png\"),\n#     width = 35, height = 15, units = \"cm\", res = 300)\nGeneOverlap::drawHeatmap(\n  gom.1v2,\n  adj.p = TRUE,\n  cutoff=0.05,\n  what=\"odds.ratio\",\n  # what=\"Jaccard\",\n  log.scale = T,\n  note.col = \"black\",\n  grid.col = \"Oranges\"\n)\n\n\n\n\n\n\n\n\n\nShow code\n# trash &lt;- dev.off()\n\n # writeLines(\"How many genes exactly are overlapping between the pairwise comparisons\")\n# getMatrix(gom.1v4, name = \"intersection\") %&gt;% t()\n\nwriteLines(\"Visualizing the significant overlaps between your lists of interesting genes and the identified modules\")\n\n\nVisualizing the significant overlaps between your lists of interesting genes and the identified modules"
  },
  {
    "objectID": "build_plot_gcn.html#intramodular-connectivity",
    "href": "build_plot_gcn.html#intramodular-connectivity",
    "title": "Build gene co-expression network (GCN) from time-course gene expression data",
    "section": "Intramodular connectivity",
    "text": "Intramodular connectivity\n“We begin by calculating the intramodular connectivity for each gene. (In network literature, connectivity is often referred to as”degree”.) The function intramodularConnectivity computes:\n\nthe whole network connectivity kTotal,\nthe within (intra)module connectivity kWithin,\nthe extra-modular connectivity kOut=kTotal-kWithin, and\nthe difference of the intra- and extra-modular connectivities kDiff = kIn - kOut = 2*kIN-kTotal\n\n\n\nShow code\n# From what I can tell, colorh1 in the tutorial refers to moduleColors\ncolorh1 &lt;- merge$colors\n\n# Calculate the connectivities of the genes\nAlldegrees1 = WGCNA::intramodularConnectivity(\n  adjMat = adj_matrix, \n  colors = colorh1\n) |&gt; \n  tibble::rownames_to_column(\"gene_name\") |&gt;  \n    mutate(\n      across(\n        matches(\"^k\"),\n        ~ round(.x, 2)\n      )\n    )\n\n\n\nCalculate the signed kME and display the first few rows/columns.\n\n\n\nShow code\ndatKME = WGCNA::signedKME(\n  datExpr, \n  merge[[\"modules\"]]$newMEs, \n  outputColumnName = \"\"\n)\n# # Display the first few rows of the data frame\n# datKME[1:6,1:6]\n\n\nPlotting the mean (± 95% CI) connectivity of genes in different modules\n\n\nShow code\npd &lt;- position_dodge(0.1)\n\n# which_var &lt;- \"kTotal\"\nwhich_var &lt;- c(\"kTotal\", \"kWithin\", \"kOut\", \"kDiff\")\n\nAlldegrees1 |&gt;  \n  # rownames_to_column(\"gene_name\") %&gt;% \n  left_join(\n    module_genes, \n    join_by(gene_name)\n  ) |&gt; \n  # PLOT FROM RAW DATA\n  mutate(\n    module_identity = factor(\n      module_identity, \n      levels = sort(unique(module_genes$module_identity)) |&gt; rev()\n    )\n  ) |&gt; \n  summarySE(\n    measurevar = which_var, \n    groupvars = \"module_identity\"\n  ) |&gt; \n  mutate(\n    type = factor(\n      type,\n      levels = which_var\n    )\n  ) |&gt; \n  # Plot\n  ggplot(\n    aes(\n      y = module_identity, \n      x = mean,\n      group = interaction(module_identity, type)\n    )\n  ) +\n  geom_vline(xintercept = 0, col = \"maroon\", alpha = 0.7) +\n  labs(\n    y = \"\",\n    x = glue::glue(\n      \"Connectivity\"\n    ),\n    title = \"\"\n  ) +\n  ## Add error bar here\n  geom_errorbar(\n    aes(xmin = mean-ci, xmax = mean+ci),\n    width = 0.3, \n    position=pd, \n    lwd = 1.3,\n    col=\"black\", \n    alpha = 1\n  ) +\n  # Add the points on top of the error bars\n  geom_point(\n    position = pd, \n    size = 3,\n    col = \"black\", \n    fill = \"orange\",\n    show.legend = F, \n    pch = 21,\n    alpha = 0.9\n  ) +\n  facet_wrap(\n    ~ type,\n    nrow = 2\n  ) +\n  theme_bw(25) +\n  # scale_color_manual(values=c(\"#F20505\",\"#F5D736\",\"#0FBF67\")) +\n  theme(\n    legend.position = \"none\"\n  )"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Compare time-course gene expression across species",
    "section": "",
    "text": "This website contain analyses by Aman and Billu for an on-going project that compares time-series gene expression data across species.\nMajority of the data sets used are from the paper by Laloum and Robinson-Rechavi (add reference here)."
  },
  {
    "objectID": "index.html#some-issues",
    "href": "index.html#some-issues",
    "title": "Compare time-course gene expression across species",
    "section": "Some issues:",
    "text": "Some issues:\nNot all of the above Cflo genes are 1:1 orthologs, some likely have paralogs in other species.\n\n\nFor how many ant genes, there are ≥ 2 genes in at least one more species?\n\n\n\nNumber of 1:1 orthlogs between Cflo and other species\n\n\nCflo:other species (orthology)\nNumber of genes\n\n\n\n\n1:1\n2257\n\n\n1:n possible\n368"
  }
]
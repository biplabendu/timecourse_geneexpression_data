---
title: "Build gene co-expression network (GCN) from time-course gene expression data"
editor_options: 
  chunk_output_type: console
---

```{r}
dttm <- Sys.Date()
```

---

> Last updated on `r dttm`.

___

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = F)
knitr::opts_chunk$set(message = F)

## For more inspiration on customizing the html output, refer to the following:
# https://bookdown.org/yihui/rmarkdown/html-document.html#table-of-contents

```


```{r lib_params}
library(dplyr)
library(dbplyr)
library(ggplot2)
for (i in list.files(here::here("R"), full.names = TRUE)) {
  source(i)
}

# SAMPLE NAME
## specify sample name
sample.names <- c(
  # dmel
  "dmel-head",
  # mmus
  "mmus-brain_stem", 
  # panu
  "panu-hypothalamus"
)
# sample.cycles <- c("LD", "DD")

## SPECIFY THE DATASET TO BUILD GCN WITH
which.sample <- sample.names[2]
```


# Create databases

```{r load_data}
data.db <- load_data(
  sample_names = sample.names
)

# cat("Here are the tables, in each database.")
# purrr::map(
#   data.db,
#   ~ src_dbi(.x)
# )
```

# Load data

## CONVERT TO FUNCTION

```{r}
writeLines(paste0("Selected Dataset: ", which.sample))

# extract the (gene-expr X time-point-of-sampling) data
dat <-
  data.db %>%
  purrr::pluck(which.sample) |> 
  # tbl(paste0(which.sample ,"_log2expression")) %>%
  mutate(
    across(
      !gene_name,
      ~ log2(.x + 1)
    )
  ) |> 
  select(gene_name, everything()) %>%
  collect()

writeLines(
"What is the dimensions of the original dataset? 
[Rows = #genes, Cols = #samples]"
)
dim(dat[-1])

```

# Filter data

```{r clean_data}
# Which genes are expressed throughout the day in forager heads?
  # count the number of time points that has â‰¥ 1 FPKM
  # subset the data and only keep the filtered genes
  
dat <- dat |> 
  subset_data(
    min_expression = 10,
    min_timepoints = 8
  )

writeLines("Dimensions of the data post-filtering step [Rows = #genes, Cols = #samples]")
dim(dat[-1])

```

This is our cleaned, input data file for building the circadian GCN. 


# Format data

- Log2 transform the data

## CONVERT TO FUNCTION

```{r format_data, fig.height=6, fig.width=6}

datExpr = as.data.frame(t(dat[-c(1)]))
names(datExpr) = dat$gene_name
rownames(datExpr) = names(dat)[-c(1)]

# USE THE FOLLOWING CODE TO CHECK IF YOU HAVE ANY BAD SAMPLES #
  # gsg = goodSamplesGenes(datExpr, verbose = 3);
  # gsg$allOK

  # sampleTree = hclust(dist(datExpr0), method = "average");
  # # Plot the sample tree: Open a graphic output window of size 12 by 9 inches
  # # The user should change the dimensions if the window is too large or too small.
  # sizeGrWindow(12,9)
  # #pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
  # par(cex = 1);
  # par(mar = c(0,4,2,0))
  # plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
  #      cex.axis = 1.5, cex.main = 2)

# save the number of genes and samples
# that will be used to create the circadian GCN
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)

writeLines("Visualizing the log-transformed data")

datExpr |> 
  tibble::rownames_to_column(
    "sample"
  ) |> 
  as_tibble() |> 
  tidyr::pivot_longer(
    cols = !sample,
    names_to = "gene_id",
    values_to = "log2_fpkm"
  ) |> 
  mutate(
    sample = stringr::str_remove(sample, "ZT")
  ) |> 
  ggplot(
    aes(
      x = log2_fpkm, 
      # color = sample,
      fill = sample
    )
  ) + 
  geom_density(
    position = "stack"
  ) + 
  theme_bw(25) +
  scale_fill_manual(
    values = viridis::viridis(nSamples)
  ) +
  theme(
    legend.position = "bottom",
    legend.justification = "right"
  ) +
  guides(
    fill = guide_legend(
      nrow = 3,
      byrow=TRUE
    )
  )

```


# Calculate gene-gene similarity

```{r gene_sim_matrix, fig.height=6, fig.width=6}
# Calculate Kendall's tau-b correlation for each gene-gene pair
sim_matrix <- calculate_gene_gene_sim(
  data = datExpr,
  name = which.sample,
  cache = FALSE
)

plot_sim_matrix(
  matrix = sim_matrix,
  n = 100
)

```


# Create adjacency matrix

## USER INPUT REQUIRED ----
To create the adjacency matrix, we need to first identify the soft-thresholding power (see WGCNA for more info).

```{r soft_thresholding_power, fig.height=6, fig.width=8}
sft <- analyze_network_topology(
  data = datExpr
)
```

> NOTE: The scale-free topology fit index reaches close to 1 (red horizontal line = 0.90) at a `soft-thresholding-power == 9`.

Now, we can go ahead and create our adjacency matrix by power-transforming the similarity matrix (see WGCNA for more info).



```{r adjacency_matrix, fig.height=6, fig.width=6}
## Specify the soft-thresholding-power
soft.power = 12

# Construct adjacency matrix
# TO DO: make function ----
adj_matrix <- WGCNA::adjacency.fromSimilarity(
  sim_matrix,
  power = soft.power,
  type = "signed"
) |> 
  as.matrix()

plot_sim_matrix(
  matrix = adj_matrix
)
```

# Identify gene clusters

The following steps are performed as per guidelines from the WGCNA package and several tutorials made available online.

### 2.1 Create topological overalp matrix

```{r adj_to_dissTOM, fig.height=4, fig.width=8}
# Turn adjacency into topological overlap
dissTOM = 1 - WGCNA::TOMsimilarity(adj_matrix)

# Call the hierarchical clustering function
geneTree = perform_hclust(
  data = dissTOM
)

```

### 2.2 Identify clusters

User defined parameters:

- minimum size (number of genes) of modules

> We like large modules, so we set the minimum module size relatively high (50).

### 2.3 Merge similar modules

User defined parameters:

- minimum correlation between two modules above which they are merged into one | var-name: MEDissThres

```{r identify_clusters}
minModuleSize = 50
# Module identification using dynamic tree cut:
modules <- create_modules(
  tree = geneTree,
  dissTOM = dissTOM,
  min_module_size = minModuleSize
)
merge = create_modules(
  tree = geneTree,
  dissTOM = dissTOM,
  min_module_size = minModuleSize,
  merge_cutoff_similarity = 0.8, # 70 % similarity
  data = datExpr
)
```

### 2.4 Calculate module-module similarity

```{r module_sim_matrix, fig.height=6, fig.width=6}

adj_matrix_ME <- calculate_module_module_sim(
  merged_modules = merge
)

```

### 2.5 Visualize the network

```{r visualize_network, fig.height=8, fig.width=8}
plot_adj_as_network(
  matrix = adj_matrix_ME$ME,
  min_edge = 0.45,
  node_label_size = 2,
  node_size = 45,
  edge_size = 5,
  node_frame_col = "grey20",
  node_fill_col = "grey80",
  vertex.frame.width = 4
)
```


# Save module identity

Obtain a list of genes in each module

```{r module_genes_list}
module_genes <- tidy_modules(
  merged_modules = merge$colors,
  mapping_tbl = adj_matrix_ME$mapping_tbl,
  data = datExpr
)

# saveRDS(
#   module_genes,
#   here::here(
#     glue::glue(
#       "./data/tmp/{which.sample}_module_genes.RDS"
#     )
#   )
# )

# TO DO:
# Save the `dat_module_gene` as a database table in the respective database.



```
